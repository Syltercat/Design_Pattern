# Prototype Pattern
[프로토타입 패턴]
- 원형이 되는 인스턴스를 사용하여 생성할 객체의 종류를 명시하고, 이렇게 만든 견본을 복사해서 새로운 객체를 생성하는 것이다.
- 초기 객체 생성 비용이 많이 드느 경우 사용하는 패턴이다.
- 생성할 객체의 유형에 대한 세부 정보를 숨기면서 복잡한 객체를 만들 수 있는 방법을 제공한다.
- 기존 객체를 복제하여 새로운 객체를 생성하는 과정에서 복잡한 인스턴스 생성 로직을 필요로하지 않는다.

--------------------------------------------------------------------------------------------------------------------

(구성)
1. Prototype: 복제될 객체의 인터페이스를 정의한다. 객체를 복사하는 메서드를 제공한다.
2. ConcretePrototype: 복사될 때 생성될 새로운 객체의 초기 상태를 가지게 된다.
3. Client: Concrete Class의 구체적인 내용을 몰라도 객체를 복사할 수 있다.
--------------------------------------------------------------------------------------------------------------------

<장점>
- 객체를 생성할 때, 기존 객체를 복사하기 때문에 간단하게 객체를 생성한다.
- 클라이언트가 객체 생성에 필요한 정보를 구체적으로 알 필요가 없다.
- 최초 객체 생성 비용이 많은 경우, 복사를 통해 객체를 만드는 것이 효율적이다.

<단점>
- 객체가 다른 객체들과 복잡한 관계에 있다면, 객체의 복사 기능 구현이 복잡할 수 있다.
- 변형 가능한 상태의 객체를 복제할 때 예외사항이 발생할 수 있으므로 조심해야 한다.

=> 프로토타입 패턴은 이미 존재하는 객체를 복사하는 것이지, 객체를 생성하는 비용을 줄이는 것은 아니다.

--------------------------------------------------------------------------------------------------------------------

요즘은 개체 종류별로 클래스를 만들기 보다는 컴포넌트나 타입 객체로 모델링 하는 것을 선호한다.